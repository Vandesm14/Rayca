{"mappings":"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","sources":["src/ts/rayca.ts","src/ts/toast.ts","src/ts/utils.ts","src/ts/index.ts"],"sourcesContent":["/** Modifies plain text sequences. */\nexport class Rayca {\n  static BYTE = 8;\n\n  width: number;\n  height: number;\n  /**\n   * Used to convert to and from string form and for character count dependent\n   * maths.\n   */\n  chars: string[];\n  /** Generates the next random number. */\n  random: () => number;\n\n  constructor(\n    width: number,\n    height: number,\n    chars: string[],\n    random: () => number\n  ) {\n    this.width = width;\n    this.height = height;\n    this.chars = chars;\n    this.random = random;\n  }\n\n  /** Returns the amount of bits needed to store a number `n`. */\n  #bitsNeeded(n: number, max: number): number | undefined {\n    return Array.from({ length: max }).findIndex(\n      (_, i) => Math.pow(2, i) - 1 >= n\n    );\n  }\n\n  /** Returns a bit mask for `n` number of bits. */\n  #bitMask(n: number): number {\n    return Array.from<number>({ length: n }).reduce(\n      (a, _, i) => a | (1 << i),\n      0\n    );\n  }\n\n  /** Returns a newly generated sequence. */\n  generate(): number[] {\n    return Array.from({ length: this.width * this.height }).map(() =>\n      Math.floor(this.random() * this.chars.length)\n    );\n  }\n\n  /** Returns a new sequence of the compressed sequence `seq`. */\n  compress(seq: number[]): number[] | undefined {\n    const bitsPerChar = this.#bitsNeeded(this.chars.length - 1, Rayca.BYTE);\n    if (bitsPerChar === undefined) return;\n\n    const charsPerByte = Math.floor(Rayca.BYTE / bitsPerChar);\n    const length = Math.ceil(seq.length / charsPerByte);\n\n    return Array.from({ length }).map((_, i) =>\n      Array.from({ length: charsPerByte })\n        .map((_, j) => (seq[j + i * charsPerByte] ?? 0) << (bitsPerChar * j))\n        .reduce((p, c) => p | c)\n    );\n  }\n\n  /** Returns a new sequence of the decompressed sequence `seq`. */\n  decompress(seq: number[]): number[] | undefined {\n    const bitsPerChar = this.#bitsNeeded(this.chars.length - 1, Rayca.BYTE);\n    if (bitsPerChar === undefined) return;\n\n    const charsPerByte = Math.floor(Rayca.BYTE / bitsPerChar);\n    const length = this.width * this.height;\n    const charBitsMask = this.#bitMask(bitsPerChar);\n\n    return Array.from({ length })\n      .reverse()\n      .map((_, i) => {\n        const offset = bitsPerChar * (i % charsPerByte);\n        return (\n          (seq[Math.floor(i / charsPerByte)] & (charBitsMask << offset)) >>\n          offset\n        );\n      });\n  }\n\n  /** Returns a string of the sequence `seq`. */\n  toString(seq: number[]): string {\n    return Array.from<string>({ length: seq.length }).reduce(\n      (a, _, i) =>\n        a + (i % this.width === 0 && i !== 0 ? '\\n' : '') + this.chars[seq[i]],\n      ''\n    );\n  }\n\n  /** Returns a sequence of the string `s`. */\n  fromString(s: string): number[] {\n    return Array.from<number[]>({ length: s.length }).reduce(\n      (a, _, i) =>\n        s.charAt(i) !== '\\n' ? [...a, this.chars.indexOf(s.charAt(i))] : a,\n      []\n    );\n  }\n\n  /** Returns a base64 token of the sequence `seq`. */\n  toToken(seq: number[]): string {\n    return btoa(String.fromCharCode(...seq));\n  }\n\n  /** Returns a sequence from the base64 token `s`. */\n  fromToken(s: string): number[] {\n    return atob(s)\n      .split('')\n      .map((c) => c.charCodeAt(0));\n  }\n}\n","/** Shows a toast. */\nexport function toast(s: string, kind: 'success' | 'error', duration: number) {\n  const toast = document.createElement('p');\n  toast.classList.add(kind);\n  toast.innerText = s;\n  document.getElementById('toast-list').appendChild(toast);\n\n  // fade in\n  setTimeout(() => toast.classList.add('fade-in'), 100);\n  // fade out\n  setTimeout(() => {\n    toast.classList.remove('fade-in');\n    // remove toast\n    setTimeout(\n      () => document.getElementById('toast-list').removeChild(toast),\n      100\n    );\n  }, duration);\n}\n","export const SEED = 1337 ^ 0xdeadbeef;\n/** Generates random numbers using mulberry32. */\nexport const random =\n  (seed: number): (() => number) =>\n  () => {\n    let t = (seed += 0x6d2b79f5);\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n  };\n","import { Rayca } from './rayca';\nimport { toast } from './toast';\nimport { random, SEED } from './utils';\n\nconst RAYCA = new Rayca(10, 10, [' ', '-', '='], random(SEED));\n\nconst TOAST_DURATION = 2000;\nconst INFINITE_SCROLL_OFFSET = 400;\nconst INFINITE_SCROLL_BATCH = 16;\n\nconst cardList = document.getElementById('card-list') as HTMLDivElement;\nconst loadMore = document.getElementById('load-more') as HTMLAnchorElement;\nconst infScrollToggle = document.getElementById(\n  'inf-scroll-toggle'\n) as HTMLInputElement;\n\n/** Creates a new card from a rayca sequence. */\nfunction card(seq: number[]): HTMLElement {\n  const card = document.createElement('div');\n  card.classList.add('card');\n\n  const id = document.createElement('p');\n  crypto.subtle\n    .digest('SHA-256', Uint8Array.from(RAYCA.compress(seq)))\n    .then((buf) =>\n      Array.from(new Uint8Array(buf)).reduce((a, b) => a + b.toString(16), '')\n    )\n    .then((hash) => {\n      id.innerText = '#' + hash.slice(0, 8);\n      id.title = '#' + hash;\n    });\n  card.append(id);\n\n  const art = document.createElement('code');\n  art.innerHTML = RAYCA.toString(seq)\n    .replace(/\\n/g, '<br>')\n    .replace(/ /g, '&nbsp;');\n  card.append(art);\n\n  const copy = document.createElement('a');\n  copy.innerText = 'Own a copy';\n  copy.href = '?token=' + RAYCA.toToken(RAYCA.compress(seq));\n  card.append(copy);\n\n  const copyClipboard = (e: Event) => {\n    e.preventDefault();\n    if (navigator.clipboard) {\n      navigator.clipboard\n        .writeText(copy.href)\n        .then(() => toast('Copied to clipboard!', 'success', TOAST_DURATION))\n        .catch(() => toast('Unable to copy.', 'error', TOAST_DURATION));\n    } else {\n      toast('Unable to copy.', 'error', TOAST_DURATION);\n    }\n  };\n  copy.addEventListener('click', copyClipboard);\n  copy.addEventListener('submit', copyClipboard);\n\n  return card;\n}\n\n/** Generates a batch of cards. */\nfunction cardBatch(batch: number): HTMLElement[] {\n  return Array.from({ length: batch }).map(() => card(RAYCA.generate()));\n}\n\n/** Loads more cards. */\nfunction loadMoreCardBatch(batch: number) {\n  cardList.append(...cardBatch(batch));\n}\n\nloadMore.addEventListener('click', () =>\n  loadMoreCardBatch(INFINITE_SCROLL_BATCH)\n);\nloadMore.addEventListener('submit', () =>\n  loadMoreCardBatch(INFINITE_SCROLL_BATCH)\n);\n\n// /** Views a token if one was provided. */\n// function viewToken(): boolean {\n//   const token = (new URLSearchParams(location.search)).get(\"token\");\n//   if (token === null) return false;\n//   // ...\n//   return true;\n// }\n\n// if (!viewToken()) { /* infinite scroll here */ }\n\nfunction infiniteScroll() {\n  const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\n  if (scrollTop + clientHeight >= scrollHeight - INFINITE_SCROLL_OFFSET) {\n    loadMoreCardBatch(INFINITE_SCROLL_BATCH);\n  }\n}\n\n// infinite scroll\nlet infiniteScrollEnabled = false;\ninfScrollToggle.addEventListener('change', (e) => {\n  if (!infiniteScrollEnabled && infScrollToggle.checked) {\n    infiniteScrollEnabled = true;\n    document.addEventListener('scroll', infiniteScroll, { passive: true });\n  } else if (infiniteScrollEnabled && !infScrollToggle.checked) {\n    infiniteScrollEnabled = false;\n    document.removeEventListener('scroll', infiniteScroll);\n  }\n});\nif (infScrollToggle.checked) {\n  infiniteScrollEnabled = true;\n  document.addEventListener('scroll', infiniteScroll, { passive: true });\n}\n\ncardList.append(...cardBatch(INFINITE_SCROLL_BATCH));\n"],"names":["$6460b210246022f1$export$6e9e6e93f1ce8ed4","width","height","chars","random","this","bitsNeeded","n","max","Array","from","length","findIndex","_","i","Math","pow","bitMask","n1","reduce","a","generate","map","floor","compress","seq","bitsPerChar","BYTE","undefined","charsPerByte","ceil","j","p","c","decompress","charBitsMask","reverse","offset","toString","fromString","s","charAt","indexOf","toToken","btoa","String","fromCharCode","fromToken","atob","split","charCodeAt","$de090ec56eafcc22$export$b410431fab84fa58","kind","duration","document","createElement","classList","add","innerText","getElementById","appendChild","setTimeout","remove","removeChild","$4aa1cd84f89e5a94$var$RAYCA","seed","t","imul","$4aa1cd84f89e5a94$var$cardList","$4aa1cd84f89e5a94$var$loadMore","$4aa1cd84f89e5a94$var$infScrollToggle","$4aa1cd84f89e5a94$var$cardBatch","batch","card","id","crypto","subtle","digest","Uint8Array","then","buf","b","hash","slice","title","append","art","innerHTML","replace","copy","href","copyClipboard","e","preventDefault","navigator","clipboard","writeText","catch","addEventListener","$4aa1cd84f89e5a94$var$card","$4aa1cd84f89e5a94$var$loadMoreCardBatch","$4aa1cd84f89e5a94$var$infiniteScroll","scrollTop","scrollHeight","clientHeight","documentElement","$4aa1cd84f89e5a94$var$infiniteScrollEnabled","checked","passive","removeEventListener"],"version":3,"file":"index.cf80cb46.js.map"}